
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND CATCH CHAR COM COMMENT COMPEQU DIVIDE ELSE EQUAL ESCARGO FOR GR8R IF LBRA LES LPAREN MINUS MOD NOT NUMBER OR PERIOD PLUS QUOTE RBRA RETURN RPAREN SCOLN SHELL SLEEP SLIME SLOW SNAIL SORT SPIRAL TIMES TRY VAR WHILEstatement : assignment\n                 | var_declaration\n                 | if_statement\n                 | while_loop\n                 | for_loop\n                 | return_statement\n                 | sleep_statement\n                 | try_catch_statementassignment : VAR VAR EQUAL expressionvar_declaration : VAR VAR EQUAL expression\n                       | VAR VARif_statement : IF LPAREN expression RPAREN statement\n                    | IF LPAREN expression RPAREN statement ELSE statementwhile_loop : WHILE LPAREN expression RPAREN statementfor_loop : FOR LPAREN expression SCOLN expression SCOLN expression RPAREN statementreturn_statement : RETURN expressionsleep_statement : SLEEP expressiontry_catch_statement : TRY statement catch_blockscatch_blocks : catch_block\n                    | catch_block catch_blockscatch_block : CATCH LPAREN VAR RPAREN statementexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | expression COMPEQU expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : VAR'
    
_lr_action_items = {'VAR':([0,10,14,15,16,18,19,20,22,27,31,32,33,34,35,41,42,43,51,56,57,58,62,],[10,17,24,24,10,24,24,24,24,24,24,24,24,24,24,10,10,24,55,10,24,10,10,]),'IF':([0,16,41,42,56,58,62,],[11,11,11,11,11,11,11,]),'WHILE':([0,16,41,42,56,58,62,],[12,12,12,12,12,12,12,]),'FOR':([0,16,41,42,56,58,62,],[13,13,13,13,13,13,13,]),'RETURN':([0,16,41,42,56,58,62,],[14,14,14,14,14,14,14,]),'SLEEP':([0,16,41,42,56,58,62,],[15,15,15,15,15,15,15,]),'TRY':([0,16,41,42,56,58,62,],[16,16,16,16,16,16,16,]),'$end':([1,2,3,4,5,6,7,8,9,17,21,23,24,25,37,38,40,44,45,46,47,48,49,50,52,53,59,61,63,],[0,-1,-2,-3,-4,-5,-6,-7,-8,-11,-16,-28,-29,-17,-18,-19,-9,-22,-23,-24,-25,-26,-27,-20,-12,-14,-13,-21,-15,]),'CATCH':([2,3,4,5,6,7,8,9,17,21,23,24,25,26,37,38,40,44,45,46,47,48,49,50,52,53,59,61,63,],[-1,-2,-3,-4,-5,-6,-7,-8,-11,-16,-28,-29,-17,39,-18,39,-9,-22,-23,-24,-25,-26,-27,-20,-12,-14,-13,-21,-15,]),'ELSE':([2,3,4,5,6,7,8,9,17,21,23,24,25,37,38,40,44,45,46,47,48,49,50,52,53,59,61,63,],[-1,-2,-3,-4,-5,-6,-7,-8,-11,-16,-28,-29,-17,-18,-19,-9,-22,-23,-24,-25,-26,-27,-20,56,-14,-13,-21,-15,]),'LPAREN':([11,12,13,14,15,18,19,20,22,27,31,32,33,34,35,39,43,57,],[18,19,20,22,22,22,22,22,22,22,22,22,22,22,22,51,22,22,]),'NUMBER':([14,15,18,19,20,22,27,31,32,33,34,35,43,57,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'EQUAL':([17,],[27,]),'PLUS':([21,23,24,25,28,29,30,36,40,44,45,46,47,48,49,54,60,],[31,-28,-29,31,31,31,31,31,31,31,31,31,31,31,-27,31,31,]),'MINUS':([21,23,24,25,28,29,30,36,40,44,45,46,47,48,49,54,60,],[32,-28,-29,32,32,32,32,32,32,32,32,32,32,32,-27,32,32,]),'TIMES':([21,23,24,25,28,29,30,36,40,44,45,46,47,48,49,54,60,],[33,-28,-29,33,33,33,33,33,33,33,33,33,33,33,-27,33,33,]),'DIVIDE':([21,23,24,25,28,29,30,36,40,44,45,46,47,48,49,54,60,],[34,-28,-29,34,34,34,34,34,34,34,34,34,34,34,-27,34,34,]),'COMPEQU':([21,23,24,25,28,29,30,36,40,44,45,46,47,48,49,54,60,],[35,-28,-29,35,35,35,35,35,35,35,35,35,35,35,-27,35,35,]),'RPAREN':([23,24,28,29,36,44,45,46,47,48,49,55,60,],[-28,-29,41,42,49,-22,-23,-24,-25,-26,-27,58,62,]),'SCOLN':([23,24,30,44,45,46,47,48,49,54,],[-28,-29,43,-22,-23,-24,-25,-26,-27,57,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,16,41,42,56,58,62,],[1,26,52,53,59,61,63,]),'assignment':([0,16,41,42,56,58,62,],[2,2,2,2,2,2,2,]),'var_declaration':([0,16,41,42,56,58,62,],[3,3,3,3,3,3,3,]),'if_statement':([0,16,41,42,56,58,62,],[4,4,4,4,4,4,4,]),'while_loop':([0,16,41,42,56,58,62,],[5,5,5,5,5,5,5,]),'for_loop':([0,16,41,42,56,58,62,],[6,6,6,6,6,6,6,]),'return_statement':([0,16,41,42,56,58,62,],[7,7,7,7,7,7,7,]),'sleep_statement':([0,16,41,42,56,58,62,],[8,8,8,8,8,8,8,]),'try_catch_statement':([0,16,41,42,56,58,62,],[9,9,9,9,9,9,9,]),'expression':([14,15,18,19,20,22,27,31,32,33,34,35,43,57,],[21,25,28,29,30,36,40,44,45,46,47,48,54,60,]),'catch_blocks':([26,38,],[37,50,]),'catch_block':([26,38,],[38,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> assignment','statement',1,'p_statement','init.py',107),
  ('statement -> var_declaration','statement',1,'p_statement','init.py',108),
  ('statement -> if_statement','statement',1,'p_statement','init.py',109),
  ('statement -> while_loop','statement',1,'p_statement','init.py',110),
  ('statement -> for_loop','statement',1,'p_statement','init.py',111),
  ('statement -> return_statement','statement',1,'p_statement','init.py',112),
  ('statement -> sleep_statement','statement',1,'p_statement','init.py',113),
  ('statement -> try_catch_statement','statement',1,'p_statement','init.py',114),
  ('assignment -> VAR VAR EQUAL expression','assignment',4,'p_assignment','init.py',118),
  ('var_declaration -> VAR VAR EQUAL expression','var_declaration',4,'p_var_declaration','init.py',122),
  ('var_declaration -> VAR VAR','var_declaration',2,'p_var_declaration','init.py',123),
  ('if_statement -> IF LPAREN expression RPAREN statement','if_statement',5,'p_if_statement','init.py',129),
  ('if_statement -> IF LPAREN expression RPAREN statement ELSE statement','if_statement',7,'p_if_statement','init.py',130),
  ('while_loop -> WHILE LPAREN expression RPAREN statement','while_loop',5,'p_while_loop','init.py',138),
  ('for_loop -> FOR LPAREN expression SCOLN expression SCOLN expression RPAREN statement','for_loop',9,'p_for_loop','init.py',143),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','init.py',148),
  ('sleep_statement -> SLEEP expression','sleep_statement',2,'p_sleep_statement','init.py',152),
  ('try_catch_statement -> TRY statement catch_blocks','try_catch_statement',3,'p_try_catch_statement','init.py',156),
  ('catch_blocks -> catch_block','catch_blocks',1,'p_catch_blocks','init.py',160),
  ('catch_blocks -> catch_block catch_blocks','catch_blocks',2,'p_catch_blocks','init.py',161),
  ('catch_block -> CATCH LPAREN VAR RPAREN statement','catch_block',5,'p_catch_block','init.py',165),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','init.py',169),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','init.py',170),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','init.py',171),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','init.py',172),
  ('expression -> expression COMPEQU expression','expression',3,'p_expression_binop','init.py',173),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','init.py',177),
  ('expression -> NUMBER','expression',1,'p_expression_number','init.py',181),
  ('expression -> VAR','expression',1,'p_expression_var','init.py',185),
]
